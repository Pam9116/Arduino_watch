Skip to content
Pam9116
/
Arduino_watch

Type / to search

Code
Issues
Pull requests
Actions
Projects
Security
Insights
Settings
Creating a new file in Arduino_watch
BreadcrumbsArduino_watch
/
Name your file...
in
main

Edit

Preview
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
#include <DHT.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>

#define DS3231_I2C_ADDRESS 0x68
#define DHTPIN 7 
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);

byte celsius_grade[] ={
  B11100,
  B10100,
  B11100,
  B00000,
  B01110,
  B01000,
  B01000,
  B01110
};
unsigned long myTime;
bool last_button1, last_button2, last_touch;
int temp, hum, nr = 0, a = 1;
char *day[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"}; 
void setup() {
  Serial.begin(9600);
  dht.begin();
  lcd.init();
  lcd.backlight();
  lcd.createChar(0,celsius_grade);
}

byte bcdToDec(byte val)
{
  return( (val/16*10) + (val%16) );
}

void readDS3231time(byte *second,
byte *minute,
byte *hour,
byte *dayOfWeek,
byte *dayOfMonth,
byte *month,
byte *year){
  Wire.beginTransmission(DS3231_I2C_ADDRESS);
  Wire.write(0); // set DS3231 register pointer to 00h
  Wire.endTransmission();
  Wire.requestFrom(DS3231_I2C_ADDRESS, 7);
  // request seven bytes of data from DS3231 starting from register 00h
  *second = bcdToDec(Wire.read() & 0x7f);
  *minute = bcdToDec(Wire.read());
  *hour = bcdToDec(Wire.read() & 0x3f);
  *dayOfWeek = bcdToDec(Wire.read());
  *dayOfMonth = bcdToDec(Wire.read());
  *month = bcdToDec(Wire.read());
  *year = bcdToDec(Wire.read());
}

void loop() {
  byte s, m, h, day_cnt, date, month, year;
  readDS3231time(&s, &m, &h, &day_cnt, &date, &month,
  &year);
  //myTime = millis();
  bool button1 = digitalRead(4), button2 = digitalRead(5), touch_button = digitalRead(6);
  Serial.print(button1);
  Serial.print(button2);
  Serial.println(nr);
  temp = dht.readTemperature();
  hum = dht.readHumidity();
  lcd.setCursor(0,0);
  if(h<10) lcd.print(0);
  lcd.print(h);
  lcd.print(":");
  if(m<10) lcd.print(0);
  lcd.print(m-1);
  lcd.print(":");
  if(s<10) lcd.print(0);
  lcd.print(s);
  lcd.setCursor(9,0); 
  lcd.print(temp);
  lcd.write(0);
  lcd.print(" ");
  lcd.print(hum);
  lcd.print("%");
  lcd.setCursor(0,1);
  lcd.print(day[day_cnt-1]);
  lcd.print(",    ");
  lcd.print(date);
  lcd.print(".");
  lcd.print(month);
  lcd.print(".");
  lcd.print(year);
  if(touch_button == 1 && last_touch == 0){
    if(a == 1){
      lcd.noBacklight();
      a = 0; 
    }
    else{
      lcd.backlight();
      a = 1;
    }
  }
  last_touch = touch_button;
}
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_BMP085.h>
#define seaLevelPressure_hPa 1013.25
LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x27, 16, 2);
Adafruit_BMP085 bmp;

 byte Celsius[] = {
  B00110,
  B01001,
  B01001,
  B00110,
  B00000,
  B00000,
  B00000,
  B00000
};

void setup() {
  lcd.init();
  lcd.backlight();
  lcd.createChar(1,Celsius);
  //lcd.nobacklight();
  if (!bmp.begin()) {
    Serial.println("Could not find a valid BMP085 sensor, check wiring!");
    while (1) {}
  }
}
  
void loop() {
    Serial.print("Temperature = ");
    Serial.print(bmp.readTemperature());
    Serial.println(" *C");
    
    Serial.print("Pressure = ");
    Serial.print(bmp.readPressure());
    Serial.println(" Pa");
    lcd.setCursor(0,0);
    lcd.print("Temp: ");
    lcd.print(bmp.readTemperature());
    lcd.write(1);
    lcd.print("C");
    lcd.setCursor(0,1);
    lcd.print("Presiune: ");
    lcd.print(bmp.readPressure());
   

    
    
    Serial.println();
    delay(500);
}
New File at / Â· Pam9116/Arduino_watch
